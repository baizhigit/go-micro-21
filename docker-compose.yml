services:

  broker-service:
    build:
      context: ./broker-service
      dockerfile: broker-service.dockerfile
    restart: always
    ports:
      - "8080:8080"
    deploy:
      mode: replicated
      replicas: 1

  logger-service:
    build:
      context: ./logger-service
      dockerfile: logger-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      - mongo

  mailer-service:
    build:
      context: ./mail-service
      dockerfile: mail-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_ENCRYPTION: none
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      FROM_NAME: "Joe Spammer"
      FROM_ADDRESS: "joe.spammer@example.com"
    depends_on:
      - mailhog

  authentication-service:
    build:
      context: ./authentication-service
      dockerfile: authentication-service.dockerfile
    restart: always
    ports:
      - "8081:8080"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=admin dbname=users sslmode=disable timezone=UTC connect_timeout=5"
    depends_on:
      - postgres

  listener-service:
    build:
      context: ./listener-service
      dockerfile: listener-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      - rabbitmq
  
  postgres:
    image: 'postgres:18.0'
    ports:
      - "5432:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: users
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always

  mongo:
    image: 'mongo:7.0.25-jammy'
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - mongo_data:/data/db
    restart: always

  mailhog:
    image: 'mailhog/mailhog:latest'
    ports:
      - "1025:1025"
      - "8025:8025"

  rabbitmq:
    image: 'rabbitmq:4.1-management-alpine'
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    restart: always

volumes:
  postgres_data:
  mongo_data:
  rabbitmq_data: